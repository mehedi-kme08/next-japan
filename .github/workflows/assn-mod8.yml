name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  setup-and-linting:
    name: Setup Lint and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: setup-and-linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Sonar Project File
        run: cat .sonar-project.properties

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=sonar

  docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Git SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & Tag Docker Image
        run: |
          docker build -t mehedime91/next-japan:latest -t mehedime91/next-japan:${{ steps.vars.outputs.sha_short }} .

      - name: Push Docker Images
        run: |
          docker push mehedime91/next-japan:latest
          docker push mehedime91/next-japan:${{ steps.vars.outputs.sha_short }}

  deploy-app-on-ec2:
    name: Deploy app to EC2
    runs-on: ubuntu-latest
    needs: docker-image

    steps:
      - name: Copy project to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "~/next-japan"

      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/next-japan
            docker stop next-japan || true
            docker rm next-japan || true
            docker build -t next-japan-app .
            docker run -d --name next-japan -p 3000:3000 next-japan-app
